var a=class{constructor(e,t){this.message=e,this.type=t}};var m=class{constructor(e){this.strategy=e}error(e){this.strategy.error(this.getDataEntity(e,"error"))}info(e){this.strategy.info(this.getDataEntity(e,"info"))}getDataEntity(e,t){return new a(e,t)}};var d=class{constructor(e){this.services=e}error(e){this.services.forEach(t=>t.error(e))}info(e){this.services.forEach(t=>t.info(e))}};var i=class{constructor(e){this.provider=e}error(e){this.provider.error(e)}info(e){this.provider.info(e)}};var o=class{constructor(e){this.provider=e;this.queue=[];this.processing=!1}addToQueue(e){this.queue.push(e)}processQueue(){if(!this.queue.length){this.processing=!1;return}this.processing=!0;let e=this.queue.shift();e&&this.processData(e),this.processQueue()}processData(e){if(!this.provider[e.type])throw new Error(`The ${e.type}() method on provider is not defined`);this.provider[e.type](e)}error(e){this.addToQueue(e)}info(e){this.addToQueue(e)}};var n=class extends o{constructor(t,l=500){super(t);this.milliseconds=l}flushQueue(){this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>{this.processQueue()},this.milliseconds)}addToQueue(t){super.addToQueue(t),this.flushQueue()}};var s=class extends o{constructor(e){super(e),this.registerEventListeners()}registerEventListeners(){addEventListener("visibilitychange",()=>{document.visibilityState==="hidden"&&this.processQueue()}),addEventListener("pagehide",this.processQueue)}};var c=class{constructor(e){this.formatter=e}error(e){console.error(this.formatter.formatData(e),e)}info(e){console.info(this.formatter.formatData(e),e)}};var f=class{constructor(e,t){this.formatter=e;this.$element=document.getElementById(t)}error(e){this.appendLog(e)}info(e){this.appendLog(e)}appendLog(e){if(!this.$element)throw new Error("Element is not defined");this.$element.insertAdjacentHTML("beforeend",`<div class="${e.type}-log">${this.formatter.formatData(e)}</div>`)}};var p=class{constructor(e){this.formatter=e}error(e){this.sendData(e)}info(e){this.sendData(e)}sendData(e){let t=new Blob([JSON.stringify({message:this.formatter.formatData(e),data:e})],{type:"application/json"});fetch("/logs",{body:t,method:"POST",keepalive:!0})}};var g=class{formatData(e){return`[${e.type.toUpperCase()}]: ${e.message}`}};export{g as BaseFormatter,n as CollectLogsAndFlushAfterATimeout,s as CollectLogsAndFlushAfterVisibilityChangeEvent,d as CompositeLogService,c as ConsoleLog,f as HtmlElementLog,p as JsonLog,i as LogNow,m as LogService};
